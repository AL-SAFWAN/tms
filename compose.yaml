# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker compose reference guide at
# https://docs.docker.com/compose/compose-file/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose

version: "3.8"

services:
  backend:
    # env_file:
    #   - .env
    build:
      context: ./backend
      dockerfile: Dockerfile
      args:
        INSTALL_DEV: ${INSTALL_DEV-true}
    volumes:
      - ./backend/app:/app
    ports:
      - "8000:80"
    command: /start-reload.sh
    depends_on:
      - db

  frontend:
    build:
      context: ./frontend
      dockerfile: frontend.dockerfile
      target: development
    volumes:
      - "./frontend:/app"
    ports:
      - "3000:5173"

    #  # No target specified here since the Dockerfile itself should handle the differentiation between stages
    # ports:
    #   - "3000:5000" # Adjust the port to match the one exposed by the production Dockerfile
    # environment:
    #   - NODE_ENV=production

  # frontend:
  #   build:
  #     context: ./frontend
  #     dockerfile: frontend.dockerfile

  db:
    image: mysql:5.7
    volumes:
      - mysql_data:/var/lib/mysql
      - ./mysql-init:/docker-entrypoint-initdb.d # Mount your initialization scripts directory
    environment:
      MYSQL_DATABASE: tms_db
      # [TODO] change this to secret.txt
      MYSQL_ROOT_PASSWORD: password # Set the root user's password
    ports:
      - "3036:3306"

volumes:
  mysql_data:
